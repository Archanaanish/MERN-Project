{"ast":null,"code":"import axios from \"axios\";\nimport { NOTES_LIST_FAIL, NOTES_LIST_REQUEST, NOTES_LIST_SUCCESS, NOTES_CREATE_FAIL, NOTES_CREATE_REQUEST, NOTES_CREATE_SUCCESS, NOTES_UPDATE_FAIL, NOTES_UPDATE_REQUEST, NOTES_UPDATE_SUCCESS } from \"../constants/notesConstants\";\nexport const listNotes = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: NOTES_LIST_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/notes`, config);\n    dispatch({\n      type: NOTES_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: NOTES_LIST_FAIL,\n      payload: message\n    });\n  }\n};\nexport const createNoteAction = (title, content, category) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: NOTES_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/notes/create`, {\n      title,\n      content,\n      category\n    }, config);\n    dispatch({\n      type: NOTES_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: NOTES_CREATE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const updateNoteAction = (id, title, content, category) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: NOTES_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/notes/${id}`, {\n      title,\n      content,\n      category\n    }, config);\n    dispatch({\n      type: NOTES_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: NOTES_UPDATE_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Final Project/frontend/src/actions/notesActions.js"],"names":["axios","NOTES_LIST_FAIL","NOTES_LIST_REQUEST","NOTES_LIST_SUCCESS","NOTES_CREATE_FAIL","NOTES_CREATE_REQUEST","NOTES_CREATE_SUCCESS","NOTES_UPDATE_FAIL","NOTES_UPDATE_REQUEST","NOTES_UPDATE_SUCCESS","listNotes","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","data","get","payload","error","message","response","createNoteAction","title","content","category","post","updateNoteAction","id","put"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { NOTES_LIST_FAIL,\r\n    NOTES_LIST_REQUEST,\r\n    NOTES_LIST_SUCCESS,\r\n    NOTES_CREATE_FAIL,\r\n    NOTES_CREATE_REQUEST,\r\n    NOTES_CREATE_SUCCESS,\r\n    NOTES_UPDATE_FAIL,\r\n    NOTES_UPDATE_REQUEST,\r\n    NOTES_UPDATE_SUCCESS,} from \"../constants/notesConstants\"\r\n\r\n\r\n\r\n\r\nexport const listNotes = () => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: NOTES_LIST_REQUEST,\r\n      });\r\n  \r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState();\r\n  \r\n      const config = {\r\n        headers: {\r\n          \r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/notes`, config);\r\n\r\n    dispatch({\r\n      type: NOTES_LIST_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    dispatch({\r\n      type: NOTES_LIST_FAIL,\r\n      payload: message,\r\n    });\r\n  }\r\n};\r\n\r\n\r\n\r\nexport const createNoteAction = (title, content, category) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  try {\r\n    dispatch({\r\n      type: NOTES_CREATE_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.post(\r\n      `/api/notes/create`,\r\n      { title, content, category },\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: NOTES_CREATE_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    dispatch({\r\n      type: NOTES_CREATE_FAIL,\r\n      payload: message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateNoteAction = (id, title, content, category) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  try {\r\n    dispatch({\r\n      type: NOTES_UPDATE_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.put(\r\n      `/api/notes/${id}`,\r\n      { title, content, category },\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: NOTES_UPDATE_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    dispatch({\r\n      type: NOTES_UPDATE_FAIL,\r\n      payload: message,\r\n    });\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}